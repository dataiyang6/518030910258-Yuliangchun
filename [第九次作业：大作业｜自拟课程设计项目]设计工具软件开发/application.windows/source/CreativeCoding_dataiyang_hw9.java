/* autogenerated by Processing revision 1276 on 2021-11-18 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import processing.pdf.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class CreativeCoding_dataiyang_hw9 extends PApplet {

//hw9
//press key "space" to change the pattern,then press key "TAB" to change the mode.
//try to move or click the mouse to see the effect
//press "c" to redraw
//press "z" to show the original photo
//press "s" to save image



PImage img;
boolean SaveImage;
boolean SavePDF;
float width1,height1;
int pattern=0,PatternNum=3,mode=0,Pattern1ModeNum=4,Pattern2ModeNum=2,Pattern3ModeNum=5;

ArrayList<Ball> balls;
//Ball[] balls;
PFont T;
Text text;
//String string1,string2;
int timedelay=80;
boolean textshow=true,originalPhotoShow=false;
String string1="Welcome";
String string2="Function "+(pattern%PatternNum+1)+"  Mode "+(mode+1);

 public void setup(){
  /* size commented out by preprocessor */;
  initiate();
}

 public void initiate(){
  background(255);
  img = loadImage("photo.png");
  //balls = new Ball[0];
  balls = new ArrayList<Ball>();
  text=new Text();
  frameCount=0;
  //loop();
}

 public void draw(){
  //background(255);
  
  width1=img.width;
  height1=img.height;
  
  if(width1>height1*1.2f) width1=height1;
  
  img.loadPixels();

  if(frameCount<timedelay&&textshow){
    text.display();
  }else if((frameCount<timedelay+1) && textshow){
    initiate();
    textshow=false;
  }
  
  if(!textshow||frameCount>timedelay){
    
    switch(pattern%PatternNum){
    case 0:
      function1();
      break;
    case 1:
      function2();
      break;
    case 2:
      function3();
      break;
    }

    if(SaveImage == true){
      save("output/Function"+(pattern%PatternNum+1)+"_"+"Mode"+(mode+1)+"_"+hour()+"_"+minute()+"_"+second()+".png");
      SaveImage =false;
    }
  }
  
  if(originalPhotoShow){
    pushMatrix();
    scale(width/(width1),height/(height1));
    image(img,0,0);
    popMatrix();
  }
}

 public void modeUpdate(){
  mode++;
  switch(pattern%PatternNum){
  case 0:
    mode=mode%Pattern1ModeNum;
    break;
  case 1:
    mode=mode%Pattern2ModeNum;
    break;
  case 2:
    mode=mode%Pattern3ModeNum;
    break;
  }
}

 public void keyPressed(){ 
  if(key == 's'){    //save image
    SaveImage = true;    
  }
  if(key == TAB){   //change pattern
     modeUpdate();
     initiate();
     textshow=true;
     string1="key \"TAB\" is pressed. ";
     string2="Function "+(pattern%PatternNum+1)+"  Mode "+(mode+1);
  }  
  if(key == ' '){    //change mode
     pattern++;
     mode=0;
     initiate();
     textshow=true;
     string1="key \"space\" is pressed. ";
     string2="Function "+(pattern%PatternNum+1)+"  Mode "+(mode+1);
  }

  if(key == 'c'){   //redraw
     initiate();
  }
  if(key == 'z'){    //show original photo
    if(originalPhotoShow){
      originalPhotoShow=false;
      background(255);
    }else if(!originalPhotoShow) originalPhotoShow=true;
  }  
}
class Ball{
  PVector location;
  float radius,xOff,yOff;
  int c;
  float nX,nY;
  float t;
  
  Ball(int mX, int mY, int cc){
    location = new PVector(mX, mY);
    switch(mode%Pattern1ModeNum){
    case 0:
      radius = 50;
      break;
    case 1:
      radius = 30;
      break;
    case 2:
      radius = random(10, 20);
      break;
    case 3:
      radius = random(0, 3);
      break;
    }
    
    this.t = random(0, 0.01f);
    
    c=cc;
    xOff = 0.0f;
    yOff = 0.0f;
  }
  
   public void run(){
    show();  
    update();
    changeColour();
  }

   public void update(){
    xOff = xOff + random(-0.5f,0.5f);
    nX = noise(location.x) * xOff;
    yOff = yOff + random(-.5f, .5f);
    nY = noise(location.y) * yOff;
    
    switch(mode%Pattern1ModeNum){
    case 0:
      //radius -= random(0.05, 0.25);
      radius -= random(0.0f, 0.1f);
      float theta = map(noise(this.location.x * 0.002f, this.location.y * 0.002f), 0, 1, -360, 360);
      //println(theta);
      location.x += cos(theta)*2;
      location.y += sin(theta)*2;
      break;
    case 1:
      radius -= random(0.0f, 0.15f);
      float theta1 = map(noise(this.location.x * 0.1f, this.location.y * 0.1f), 0, 1, -360, 360);
      location.x += cos(theta1)*10;
      location.y += sin(theta1)*10;
      break;
    case 2:
      radius -= random(0.05f, 0.25f);
      location.x += nX;
      location.y += nY;
      break;      
    case 3:
      radius -= random(0.02f);
      location.x += nX;
      location.y += nY;
      break;
    }
    
  }

   public void changeColour(){
    c = color(img.get(PApplet.parseInt(location.x), PApplet.parseInt(location.y)));
  }

   public void show(){
    noStroke();
    fill(c);
    ellipse(location.x,location.y,radius,radius);
    //println(radius);
  }
}
class Text {

  Text() {
    T = loadFont("AdobeDevanagari-Italic-48.vlw");
    //T=createFont("AdobeDevanagari-Italic", 150);
    textFont(T);
  }

   public void display() {
    //println("frameCount:",frameCount);
    fill(0xFF4D118E);

    textSize(50);
    text(string1,width/6,height*2/5);
    text(string2,width/6,height*2/5+50);
    
  }
}
 public void function1(){
  pushMatrix();
  scale(width/(width1),height/(height1));
  
  for (int i=0; i < balls.size(); i++){
    Ball ball=balls.get(i);
    ball.run();
    
    if (ball.radius < 0){
      balls.remove(i);
    } 
  }

  if (mousePressed){
     for (int i = 0; i < 6; i++){
       balls.add(new Ball(PApplet.parseInt(mouseX*width1/width),PApplet.parseInt(mouseY*height1/height) , color(img.get(PApplet.parseInt(mouseX*width1/width),PApplet.parseInt(mouseY*height1/height)))));
    }
  }
  popMatrix();
}

 public void function3(){
  pushMatrix();
  scale(width/(width1),height/(height1));
  
  switch(mode%Pattern3ModeNum){
    case 0:
      for(int i=0;i<500;i++){
        int xx=floor(random(width1)); //Take the whole down
        int yy=ceil(random(height1)); //round up to an integer
        
        int c =img.get(xx,yy);
        //float b =brightness(c);
        //float eSize=map(b,0,255,5,20);
        float eSize= map(mouseX, 0, width, 1, 30);
        noStroke();
        fill(c);
        //ellipse(width/2,width/2,width/2,width/2);
        //ellipse(mouseX,mouseY,50,50);
        //ellipse(xx,yy,1,1);
        ellipse(xx,yy,eSize,eSize);
      }    
      break;
      
    case 1:
      for (int i = 0; i< 50; i ++) {
        int xx = (int)random(width1);
        int yy = (int)random(height1);
        int fc = img.get(xx, yy);
        fill(fc);
        noStroke();
        float eSize= map(mouseX, 0, width, 1, 40);
        
        pushMatrix();
        translate(xx, yy);
        rotate(random(TWO_PI));
        rect(0, 0, eSize, eSize);
        popMatrix();
        //rect(xx, yy, 20, 20);
      }    
      break;
      
    case 2:
      for (int i = 0; i< 500; i ++) {
        int xx = (int)random(width1);
        int yy = (int)random(height1);
        int fc = img.get(xx, yy);
        fill(fc);
        noStroke();
        float s1 = map(mouseX, 0, width, 1, 6);
        float s2 = map(mouseY, 0, height, 10, 100);  
        //float h = hue(fc);
        //float angle = map(h, 0, 255, 0, PI);
        
        pushMatrix();
        translate(xx, yy);
        rotate(random(PI));
        //rect(0, 0, 2, 50);
        rect(0, 0, s1, s2);
        popMatrix();
      }        
      break;
      
    case 3:
      float s1 = map(mouseX, 0, width, 1, 100);
      float s2 = map(mouseY, 0, width, 1, 100);  
      for (int y = 0; y < img.height; y+=s2 ) {
        for (int x = 0; x < img.width; x+=s1) {
          int loc = x + (y * img.width);
          fill(img.pixels[loc]);
          noStroke();
          rect(x, y, s1, s2);
        }
      }        
      break;  
      
    case 4:
      image(img,0,0);
      float l = map(mouseX, 0, width, 0, 1);
      // BLUR, POSTERIZE, THRESHOLD, INVERT, GRAY, ERODE, DILATE
      filter(THRESHOLD, l);        
      break;        
  }
  
  popMatrix();
    
  if(mousePressed){
    initiate();
  }
}

 public void function2(){
  pushMatrix();
  scale(width/(width1),height/(height1));
  
  if(mousePressed){
    initiate();
  }
  
  int index = 0;
  for (int y = 0; y < height1; y+=1) {
    for (int x = 0; x < width1; x+=1) {
      if (random(20000) < 1) {
        int pixelColor = img.pixels[index];
        
        switch(mode%Pattern2ModeNum){
        case 0:
          float s1 = map(mouseX, 0, width, 10, 255);    
          pixelColor = color(pixelColor, PApplet.parseInt(s1));
          break;
        case 1:
          pixelColor = color(pixelColor, 100);
          break;          
        }
       
        pushMatrix();
        translate(x, y);
        rotate(radians(random(-90, 90)));
        
        if (frameCount < 20) {
          paintStroke(random(150, 250), pixelColor, (int)random(20, 40));
        } else if (frameCount < 50) {
          paintStroke(random(75, 125), pixelColor, (int)random(8, 12));
        } else if (frameCount < 300) {
          paintStroke(random(30, 60), pixelColor, (int)random(1, 4));
        } else if (frameCount < 350) {
          paintStroke(random(5, 20), pixelColor, (int)random(5, 15));
        } else if (frameCount < 600) {
          paintStroke(random(1, 10), pixelColor, (int)random(1, 7));
        }
        
        popMatrix();
      }
      index += 1;
    }
  }
  
  if (frameCount > 600) {
    
  }
  
  popMatrix();
}

 public void paintStroke(float strokeLength, int strokeColor, int strokeThickness) {
  float stepLength = strokeLength/4.0f;
  
  // Determines if the stroke is curved. A straight line is 0.
  float tangent1 = 0;
  float tangent2 = 0;
  
  if (random(1.0f) < 0.7f) {
    tangent1 = random(-strokeLength, strokeLength);
    tangent2 = random(-strokeLength, strokeLength);
  } 
  
  // Draw a big stroke
  noFill();
  stroke(strokeColor);
  strokeWeight(strokeThickness);
  curve(tangent1, -stepLength*2, 0, -stepLength, 0, stepLength, tangent2, stepLength*2);
  
  switch(mode%Pattern2ModeNum){
  case 0:
    break;
  case 1:
    int z = 1;
    // Draw stroke's details
    for (int num = strokeThickness; num > 0; num --) {
      float offset = random(-50, 25);
      int newColor = color(red(strokeColor)+offset, green(strokeColor)+offset, blue(strokeColor)+offset, random(100, 255));
      stroke(newColor);
      strokeWeight((int)random(0, 3));
      curve(tangent1, -stepLength*2, z-strokeThickness/2, -stepLength*random(0.9f, 1.1f), z-strokeThickness/2, stepLength*random(0.9f, 1.1f), tangent2, stepLength*2);
      z += 1;
    }
    break;          
  }

}


  public void settings() { size(600, 800); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "CreativeCoding_dataiyang_hw9" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
